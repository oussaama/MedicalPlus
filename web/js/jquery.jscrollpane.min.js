(function($, dataAndEvents, permanent) {
  /**
   * @param {(Node|string)} settings
   * @return {?}
   */
  $.fn.jScrollPane = function(settings) {
    /**
     * @param {Object} elem
     * @param {?} s
     * @return {undefined}
     */
    function JScrollPane(elem, s) {
      /**
       * @param {?} s
       * @return {undefined}
       */
      function initialise(s) {
        var aM;
        var lastContentX;
        var lastContentY;
        var aK;
        var originalScrollTop;
        var originalScrollLeft;
        /** @type {boolean} */
        var maintainAtBottom = false;
        /** @type {boolean} */
        var maintainAtRight = false;
        settings = s;
        if (pane === permanent) {
          originalScrollTop = elem.scrollTop();
          originalScrollLeft = elem.scrollLeft();
          elem.css({
            overflow : "hidden",
            padding : 0
          });
          paneWidth = elem.innerWidth() + originalPaddingTotalWidth;
          paneHeight = elem.innerHeight();
          elem.width(paneWidth);
          pane = $('<div class="jspPane" />').css("padding", originalPadding).append(elem.children());
          container = $('<div class="jspContainer" />').css({
            width : paneWidth + "px",
            height : paneHeight + "px"
          }).append(pane).appendTo(elem);
        } else {
          elem.css("width", "");
          maintainAtBottom = settings.stickToBottom && isCloseToBottom();
          maintainAtRight = settings.stickToRight && isCloseToRight();
          /** @type {boolean} */
          aK = elem.innerWidth() + originalPaddingTotalWidth != paneWidth || elem.outerHeight() != paneHeight;
          if (aK) {
            paneWidth = elem.innerWidth() + originalPaddingTotalWidth;
            paneHeight = elem.innerHeight();
            container.css({
              width : paneWidth + "px",
              height : paneHeight + "px"
            });
          }
          if (!aK && (previousContentWidth == contentWidth && pane.outerHeight() == contentHeight)) {
            elem.width(paneWidth);
            return;
          }
          previousContentWidth = contentWidth;
          pane.css("width", "");
          elem.width(paneWidth);
          container.find(">.jspVerticalBar,>.jspHorizontalBar").remove().end();
        }
        pane.css("overflow", "auto");
        if (s.contentWidth) {
          contentWidth = s.contentWidth;
        } else {
          contentWidth = pane[0].scrollWidth;
        }
        contentHeight = pane[0].scrollHeight;
        pane.css("overflow", "");
        /** @type {number} */
        percentInViewH = contentWidth / paneWidth;
        /** @type {number} */
        percentInViewV = contentHeight / paneHeight;
        /** @type {boolean} */
        isScrollableV = percentInViewV > 1;
        /** @type {boolean} */
        isScrollableH = percentInViewH > 1;
        if (!(isScrollableH || isScrollableV)) {
          elem.removeClass("jspScrollable");
          pane.css({
            top : 0,
            width : container.width() - originalPaddingTotalWidth
          });
          removeMousewheel();
          removeFocusHandler();
          removeKeyboardNav();
          removeClickOnTrack();
          unhijackInternalLinks();
        } else {
          elem.addClass("jspScrollable");
          aM = settings.maintainPosition && (verticalDragPosition || horizontalDragPosition);
          if (aM) {
            lastContentX = contentPositionX();
            lastContentY = contentPositionY();
          }
          initialiseVerticalScroll();
          initialiseHorizontalScroll();
          resizeScrollbars();
          if (aM) {
            scrollToX(maintainAtRight ? contentWidth - paneWidth : lastContentX, false);
            scrollToY(maintainAtBottom ? contentHeight - paneHeight : lastContentY, false);
          }
          initFocusHandler();
          initMousewheel();
          initTouch();
          if (settings.enableKeyboardNavigation) {
            initKeyboardNav();
          }
          if (settings.clickOnTrack) {
            initClickOnTrack();
          }
          observeHash();
          if (settings.hijackInternalLinks) {
            hijackInternalLinks();
          }
        }
        if (settings.autoReinitialise && !reinitialiseInterval) {
          /** @type {number} */
          reinitialiseInterval = setInterval(function() {
            initialise(settings);
          }, settings.autoReinitialiseDelay);
        } else {
          if (!settings.autoReinitialise && reinitialiseInterval) {
            clearInterval(reinitialiseInterval);
          }
        }
        if (originalScrollTop) {
          if (elem.scrollTop(0)) {
            scrollToY(originalScrollTop, false);
          }
        }
        if (originalScrollLeft) {
          if (elem.scrollLeft(0)) {
            scrollToX(originalScrollLeft, false);
          }
        }
        elem.trigger("jsp-initialised", [isScrollableH || isScrollableV]);
      }
      /**
       * @return {undefined}
       */
      function initialiseVerticalScroll() {
        if (isScrollableV) {
          container.append($('<div class="jspVerticalBar" />').append($('<div class="jspCap jspCapTop" />'), $('<div class="jspTrack" />').append($('<div class="jspDrag" />').append($('<div class="jspDragTop" />'), $('<div class="jspDragBottom" />'))), $('<div class="jspCap jspCapBottom" />')));
          verticalBar = container.find(">.jspVerticalBar");
          verticalTrack = verticalBar.find(">.jspTrack");
          verticalDrag = verticalTrack.find(">.jspDrag");
          if (settings.showArrows) {
            arrowUp = $('<a class="jspArrow jspArrowUp" />').bind("mousedown.jsp", getArrowScroll(0, -1)).bind("click.jsp", nil);
            arrowDown = $('<a class="jspArrow jspArrowDown" />').bind("mousedown.jsp", getArrowScroll(0, 1)).bind("click.jsp", nil);
            if (settings.arrowScrollOnHover) {
              arrowUp.bind("mouseover.jsp", getArrowScroll(0, -1, arrowUp));
              arrowDown.bind("mouseover.jsp", getArrowScroll(0, 1, arrowDown));
            }
            appendArrows(verticalTrack, settings.verticalArrowPositions, arrowUp, arrowDown);
          }
          verticalTrackHeight = paneHeight;
          container.find(">.jspVerticalBar>.jspCap:visible,>.jspVerticalBar>.jspArrow").each(function() {
            verticalTrackHeight -= $(this).outerHeight();
          });
          verticalDrag.hover(function() {
            verticalDrag.addClass("jspHover");
          }, function() {
            verticalDrag.removeClass("jspHover");
          }).bind("mousedown.jsp", function(touch) {
            $("html").bind("dragstart.jsp selectstart.jsp", nil);
            verticalDrag.addClass("jspActive");
            /** @type {number} */
            var startY = touch.pageY - verticalDrag.position().top;
            $("html").bind("mousemove.jsp", function(first) {
              positionDragY(first.pageY - startY, false);
            }).bind("mouseup.jsp mouseleave.jsp", cancelDrag);
            return false;
          });
          sizeVerticalScrollbar();
        }
      }
      /**
       * @return {undefined}
       */
      function sizeVerticalScrollbar() {
        verticalTrack.height(verticalTrackHeight + "px");
        /** @type {number} */
        verticalDragPosition = 0;
        scrollbarWidth = settings.verticalGutter + verticalTrack.outerWidth();
        pane.width(paneWidth - scrollbarWidth - originalPaddingTotalWidth);
        try {
          if (verticalBar.position().left === 0) {
            pane.css("margin-left", scrollbarWidth + "px");
          }
        } catch (s) {
        }
      }
      /**
       * @return {undefined}
       */
      function initialiseHorizontalScroll() {
        if (isScrollableH) {
          container.append($('<div class="jspHorizontalBar" />').append($('<div class="jspCap jspCapLeft" />'), $('<div class="jspTrack" />').append($('<div class="jspDrag" />').append($('<div class="jspDragLeft" />'), $('<div class="jspDragRight" />'))), $('<div class="jspCap jspCapRight" />')));
          horizontalBar = container.find(">.jspHorizontalBar");
          horizontalTrack = horizontalBar.find(">.jspTrack");
          horizontalDrag = horizontalTrack.find(">.jspDrag");
          if (settings.showArrows) {
            arrowLeft = $('<a class="jspArrow jspArrowLeft" />').bind("mousedown.jsp", getArrowScroll(-1, 0)).bind("click.jsp", nil);
            arrowRight = $('<a class="jspArrow jspArrowRight" />').bind("mousedown.jsp", getArrowScroll(1, 0)).bind("click.jsp", nil);
            if (settings.arrowScrollOnHover) {
              arrowLeft.bind("mouseover.jsp", getArrowScroll(-1, 0, arrowLeft));
              arrowRight.bind("mouseover.jsp", getArrowScroll(1, 0, arrowRight));
            }
            appendArrows(horizontalTrack, settings.horizontalArrowPositions, arrowLeft, arrowRight);
          }
          horizontalDrag.hover(function() {
            horizontalDrag.addClass("jspHover");
          }, function() {
            horizontalDrag.removeClass("jspHover");
          }).bind("mousedown.jsp", function(e) {
            $("html").bind("dragstart.jsp selectstart.jsp", nil);
            horizontalDrag.addClass("jspActive");
            /** @type {number} */
            var startX = e.pageX - horizontalDrag.position().left;
            $("html").bind("mousemove.jsp", function(first) {
              positionDragX(first.pageX - startX, false);
            }).bind("mouseup.jsp mouseleave.jsp", cancelDrag);
            return false;
          });
          horizontalTrackWidth = container.innerWidth();
          sizeHorizontalScrollbar();
        }
      }
      /**
       * @return {undefined}
       */
      function sizeHorizontalScrollbar() {
        container.find(">.jspHorizontalBar>.jspCap:visible,>.jspHorizontalBar>.jspArrow").each(function() {
          horizontalTrackWidth -= $(this).outerWidth();
        });
        horizontalTrack.width(horizontalTrackWidth + "px");
        /** @type {number} */
        horizontalDragPosition = 0;
      }
      /**
       * @return {undefined}
       */
      function resizeScrollbars() {
        if (isScrollableH && isScrollableV) {
          var horizontalTrackHeight = horizontalTrack.outerHeight();
          var verticalTrackWidth = verticalTrack.outerWidth();
          verticalTrackHeight -= horizontalTrackHeight;
          $(horizontalBar).find(">.jspCap:visible,>.jspArrow").each(function() {
            horizontalTrackWidth += $(this).outerWidth();
          });
          horizontalTrackWidth -= verticalTrackWidth;
          paneHeight -= verticalTrackWidth;
          paneWidth -= horizontalTrackHeight;
          horizontalTrack.parent().append($('<div class="jspCorner" />').css("width", horizontalTrackHeight + "px"));
          sizeVerticalScrollbar();
          sizeHorizontalScrollbar();
        }
        if (isScrollableH) {
          pane.width(container.outerWidth() - originalPaddingTotalWidth + "px");
        }
        contentHeight = pane.outerHeight();
        /** @type {number} */
        percentInViewV = contentHeight / paneHeight;
        if (isScrollableH) {
          /** @type {number} */
          horizontalDragWidth = Math.ceil(1 / percentInViewH * horizontalTrackWidth);
          if (horizontalDragWidth > settings.horizontalDragMaxWidth) {
            horizontalDragWidth = settings.horizontalDragMaxWidth;
          } else {
            if (horizontalDragWidth < settings.horizontalDragMinWidth) {
              horizontalDragWidth = settings.horizontalDragMinWidth;
            }
          }
          horizontalDrag.width(horizontalDragWidth + "px");
          /** @type {number} */
          dragMaxX = horizontalTrackWidth - horizontalDragWidth;
          _positionDragX(horizontalDragPosition);
        }
        if (isScrollableV) {
          /** @type {number} */
          verticalDragHeight = Math.ceil(1 / percentInViewV * verticalTrackHeight);
          if (verticalDragHeight > settings.verticalDragMaxHeight) {
            verticalDragHeight = settings.verticalDragMaxHeight;
          } else {
            if (verticalDragHeight < settings.verticalDragMinHeight) {
              verticalDragHeight = settings.verticalDragMinHeight;
            }
          }
          verticalDrag.height(verticalDragHeight + "px");
          /** @type {number} */
          dragMaxY = verticalTrackHeight - verticalDragHeight;
          _positionDragY(verticalDragPosition);
        }
      }
      /**
       * @param {Object} ele
       * @param {string} p
       * @param {(Element|string)} a1
       * @param {(Element|string)} a2
       * @return {undefined}
       */
      function appendArrows(ele, p, a1, a2) {
        /** @type {string} */
        var p1 = "before";
        /** @type {string} */
        var p2 = "after";
        var aTemp;
        if (p == "os") {
          /** @type {string} */
          p = /Mac/.test(navigator.platform) ? "after" : "split";
        }
        if (p == p1) {
          /** @type {string} */
          p2 = p;
        } else {
          if (p == p2) {
            /** @type {string} */
            p1 = p;
            /** @type {(Element|string)} */
            aTemp = a1;
            /** @type {(Element|string)} */
            a1 = a2;
            a2 = aTemp;
          }
        }
        ele[p1](a1)[p2](a2);
      }
      /**
       * @param {number} dirX
       * @param {number} dirY
       * @param {?} ele
       * @return {?}
       */
      function getArrowScroll(dirX, dirY, ele) {
        return function() {
          arrowScroll(dirX, dirY, this, ele);
          this.blur();
          return false;
        };
      }
      /**
       * @param {number} dirX
       * @param {number} dirY
       * @param {Text} arrow
       * @param {boolean} ele
       * @return {undefined}
       */
      function arrowScroll(dirX, dirY, arrow, ele) {
        arrow = $(arrow).addClass("jspActive");
        var eve;
        var tref;
        /** @type {boolean} */
        var isFirst = true;
        /**
         * @return {undefined}
         */
        var doScroll = function() {
          if (dirX !== 0) {
            jsp.scrollByX(dirX * settings.arrowButtonSpeed);
          }
          if (dirY !== 0) {
            jsp.scrollByY(dirY * settings.arrowButtonSpeed);
          }
          /** @type {number} */
          tref = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.arrowRepeatFreq);
          /** @type {boolean} */
          isFirst = false;
        };
        doScroll();
        /** @type {string} */
        eve = ele ? "mouseout.jsp" : "mouseup.jsp";
        ele = ele || $("html");
        ele.bind(eve, function() {
          arrow.removeClass("jspActive");
          if (tref) {
            clearTimeout(tref);
          }
          /** @type {null} */
          tref = null;
          ele.unbind(eve);
        });
      }
      /**
       * @return {undefined}
       */
      function initClickOnTrack() {
        removeClickOnTrack();
        if (isScrollableV) {
          verticalTrack.bind("mousedown.jsp", function(e) {
            if (e.originalTarget === permanent || e.originalTarget == e.currentTarget) {
              var curElem = $(this);
              var pos = curElem.offset();
              /** @type {number} */
              var direction = e.pageY - pos.top - verticalDragPosition;
              var tref;
              /** @type {boolean} */
              var isFirst = true;
              /**
               * @return {undefined}
               */
              var doScroll = function() {
                var containerOffset = curElem.offset();
                /** @type {number} */
                var pos = e.pageY - containerOffset.top - verticalDragHeight / 2;
                /** @type {number} */
                var contentDragY = paneHeight * settings.scrollPagePercent;
                /** @type {number} */
                var dragY = dragMaxY * contentDragY / (contentHeight - paneHeight);
                if (direction < 0) {
                  if (verticalDragPosition - dragY > pos) {
                    jsp.scrollByY(-contentDragY);
                  } else {
                    positionDragY(pos);
                  }
                } else {
                  if (direction > 0) {
                    if (verticalDragPosition + dragY < pos) {
                      jsp.scrollByY(contentDragY);
                    } else {
                      positionDragY(pos);
                    }
                  } else {
                    cancelClick();
                    return;
                  }
                }
                /** @type {number} */
                tref = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.trackClickRepeatFreq);
                /** @type {boolean} */
                isFirst = false;
              };
              /**
               * @return {undefined}
               */
              var cancelClick = function() {
                if (tref) {
                  clearTimeout(tref);
                }
                /** @type {null} */
                tref = null;
                $(document).unbind("mouseup.jsp", cancelClick);
              };
              doScroll();
              $(document).bind("mouseup.jsp", cancelClick);
              return false;
            }
          });
        }
        if (isScrollableH) {
          horizontalTrack.bind("mousedown.jsp", function(e) {
            if (e.originalTarget === permanent || e.originalTarget == e.currentTarget) {
              var curElem = $(this);
              var totalOffset = curElem.offset();
              /** @type {number} */
              var direction = e.pageX - totalOffset.left - horizontalDragPosition;
              var tref;
              /** @type {boolean} */
              var isFirst = true;
              /**
               * @return {undefined}
               */
              var doScroll = function() {
                var totalOffset = curElem.offset();
                /** @type {number} */
                var pos = e.pageX - totalOffset.left - horizontalDragWidth / 2;
                /** @type {number} */
                var contentDragX = paneWidth * settings.scrollPagePercent;
                /** @type {number} */
                var dragX = dragMaxX * contentDragX / (contentWidth - paneWidth);
                if (direction < 0) {
                  if (horizontalDragPosition - dragX > pos) {
                    jsp.scrollByX(-contentDragX);
                  } else {
                    positionDragX(pos);
                  }
                } else {
                  if (direction > 0) {
                    if (horizontalDragPosition + dragX < pos) {
                      jsp.scrollByX(contentDragX);
                    } else {
                      positionDragX(pos);
                    }
                  } else {
                    cancelClick();
                    return;
                  }
                }
                /** @type {number} */
                tref = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.trackClickRepeatFreq);
                /** @type {boolean} */
                isFirst = false;
              };
              /**
               * @return {undefined}
               */
              var cancelClick = function() {
                if (tref) {
                  clearTimeout(tref);
                }
                /** @type {null} */
                tref = null;
                $(document).unbind("mouseup.jsp", cancelClick);
              };
              doScroll();
              $(document).bind("mouseup.jsp", cancelClick);
              return false;
            }
          });
        }
      }
      /**
       * @return {undefined}
       */
      function removeClickOnTrack() {
        if (horizontalTrack) {
          horizontalTrack.unbind("mousedown.jsp");
        }
        if (verticalTrack) {
          verticalTrack.unbind("mousedown.jsp");
        }
      }
      /**
       * @return {undefined}
       */
      function cancelDrag() {
        $("html").unbind("dragstart.jsp selectstart.jsp mousemove.jsp mouseup.jsp mouseleave.jsp");
        if (verticalDrag) {
          verticalDrag.removeClass("jspActive");
        }
        if (horizontalDrag) {
          horizontalDrag.removeClass("jspActive");
        }
      }
      /**
       * @param {number} destY
       * @param {boolean} recurring
       * @return {undefined}
       */
      function positionDragY(destY, recurring) {
        if (!isScrollableV) {
          return;
        }
        if (destY < 0) {
          /** @type {number} */
          destY = 0;
        } else {
          if (destY > dragMaxY) {
            destY = dragMaxY;
          }
        }
        if (recurring === permanent) {
          recurring = settings.animateScroll;
        }
        if (recurring) {
          jsp.animate(verticalDrag, "top", destY, _positionDragY);
        } else {
          verticalDrag.css("top", destY);
          _positionDragY(destY);
        }
      }
      /**
       * @param {(number|string)} destY
       * @return {undefined}
       */
      function _positionDragY(destY) {
        if (destY === permanent) {
          destY = verticalDrag.position().top;
        }
        container.scrollTop(0);
        /** @type {(number|string)} */
        verticalDragPosition = destY;
        /** @type {boolean} */
        var isAtTop = verticalDragPosition === 0;
        /** @type {boolean} */
        var isAtBottom = verticalDragPosition == dragMaxY;
        /** @type {number} */
        var percentScrolled = destY / dragMaxY;
        /** @type {number} */
        var destLeft = -percentScrolled * (contentHeight - paneHeight);
        if (wasAtTop != isAtTop || wasAtBottom != isAtBottom) {
          /** @type {boolean} */
          wasAtTop = isAtTop;
          /** @type {boolean} */
          wasAtBottom = isAtBottom;
          elem.trigger("jsp-arrow-change", [wasAtTop, wasAtBottom, wasAtLeft, wasAtRight]);
        }
        updateVerticalArrows(isAtTop, isAtBottom);
        pane.css("top", destLeft);
        elem.trigger("jsp-scroll-y", [-destLeft, isAtTop, isAtBottom]).trigger("scroll");
      }
      /**
       * @param {number} destX
       * @param {boolean} animate
       * @return {undefined}
       */
      function positionDragX(destX, animate) {
        if (!isScrollableH) {
          return;
        }
        if (destX < 0) {
          /** @type {number} */
          destX = 0;
        } else {
          if (destX > dragMaxX) {
            destX = dragMaxX;
          }
        }
        if (animate === permanent) {
          animate = settings.animateScroll;
        }
        if (animate) {
          jsp.animate(horizontalDrag, "left", destX, _positionDragX);
        } else {
          horizontalDrag.css("left", destX);
          _positionDragX(destX);
        }
      }
      /**
       * @param {(number|string)} destX
       * @return {undefined}
       */
      function _positionDragX(destX) {
        if (destX === permanent) {
          destX = horizontalDrag.position().left;
        }
        container.scrollTop(0);
        /** @type {(number|string)} */
        horizontalDragPosition = destX;
        /** @type {boolean} */
        var isAtLeft = horizontalDragPosition === 0;
        /** @type {boolean} */
        var isAtRight = horizontalDragPosition == dragMaxX;
        /** @type {number} */
        var percentScrolled = destX / dragMaxX;
        /** @type {number} */
        var destLeft = -percentScrolled * (contentWidth - paneWidth);
        if (wasAtLeft != isAtLeft || wasAtRight != isAtRight) {
          /** @type {boolean} */
          wasAtLeft = isAtLeft;
          /** @type {boolean} */
          wasAtRight = isAtRight;
          elem.trigger("jsp-arrow-change", [wasAtTop, wasAtBottom, wasAtLeft, wasAtRight]);
        }
        updateHorizontalArrows(isAtLeft, isAtRight);
        pane.css("left", destLeft);
        elem.trigger("jsp-scroll-x", [-destLeft, isAtLeft, isAtRight]).trigger("scroll");
      }
      /**
       * @param {boolean} isAtTop
       * @param {boolean} isAtBottom
       * @return {undefined}
       */
      function updateVerticalArrows(isAtTop, isAtBottom) {
        if (settings.showArrows) {
          arrowUp[isAtTop ? "addClass" : "removeClass"]("jspDisabled");
          arrowDown[isAtBottom ? "addClass" : "removeClass"]("jspDisabled");
        }
      }
      /**
       * @param {boolean} isAtLeft
       * @param {boolean} isAtRight
       * @return {undefined}
       */
      function updateHorizontalArrows(isAtLeft, isAtRight) {
        if (settings.showArrows) {
          arrowLeft[isAtLeft ? "addClass" : "removeClass"]("jspDisabled");
          arrowRight[isAtRight ? "addClass" : "removeClass"]("jspDisabled");
        }
      }
      /**
       * @param {number} destY
       * @param {boolean} recurring
       * @return {undefined}
       */
      function scrollToY(destY, recurring) {
        /** @type {number} */
        var percentScrolled = destY / (contentHeight - paneHeight);
        positionDragY(percentScrolled * dragMaxY, recurring);
      }
      /**
       * @param {number} destX
       * @param {boolean} animate
       * @return {undefined}
       */
      function scrollToX(destX, animate) {
        /** @type {number} */
        var percentScrolled = destX / (contentWidth - paneWidth);
        positionDragX(percentScrolled * dragMaxX, animate);
      }
      /**
       * @param {?} ele
       * @param {boolean} recurring
       * @param {boolean} animate
       * @return {undefined}
       */
      function scrollToElement(ele, recurring, animate) {
        var e;
        var eleHeight;
        var eleWidth;
        /** @type {number} */
        var eleTop = 0;
        /** @type {number} */
        var eleLeft = 0;
        var viewportTop;
        var viewportLeft;
        var maxVisibleEleTop;
        var maxVisibleEleLeft;
        var destY;
        var destX;
        try {
          e = $(ele);
        } catch (aN) {
          return;
        }
        eleHeight = e.outerHeight();
        eleWidth = e.outerWidth();
        container.scrollTop(0);
        container.scrollLeft(0);
        for (;!e.is(".jspPane");) {
          eleTop += e.position().top;
          eleLeft += e.position().left;
          e = e.offsetParent();
          if (/^body|html$/i.test(e[0].nodeName)) {
            return;
          }
        }
        viewportTop = contentPositionY();
        maxVisibleEleTop = viewportTop + paneHeight;
        if (eleTop < viewportTop || recurring) {
          /** @type {number} */
          destY = eleTop - settings.verticalGutter;
        } else {
          if (eleTop + eleHeight > maxVisibleEleTop) {
            destY = eleTop - paneHeight + eleHeight + settings.verticalGutter;
          }
        }
        if (destY) {
          scrollToY(destY, animate);
        }
        viewportLeft = contentPositionX();
        maxVisibleEleLeft = viewportLeft + paneWidth;
        if (eleLeft < viewportLeft || recurring) {
          /** @type {number} */
          destX = eleLeft - settings.horizontalGutter;
        } else {
          if (eleLeft + eleWidth > maxVisibleEleLeft) {
            destX = eleLeft - paneWidth + eleWidth + settings.horizontalGutter;
          }
        }
        if (destX) {
          scrollToX(destX, animate);
        }
      }
      /**
       * @return {?}
       */
      function contentPositionX() {
        return-pane.position().left;
      }
      /**
       * @return {?}
       */
      function contentPositionY() {
        return-pane.position().top;
      }
      /**
       * @return {?}
       */
      function isCloseToBottom() {
        /** @type {number} */
        var scrollableHeight = contentHeight - paneHeight;
        return scrollableHeight > 20 && scrollableHeight - contentPositionY() < 10;
      }
      /**
       * @return {?}
       */
      function isCloseToRight() {
        /** @type {number} */
        var scrollableWidth = contentWidth - paneWidth;
        return scrollableWidth > 20 && scrollableWidth - contentPositionX() < 10;
      }
      /**
       * @return {undefined}
       */
      function initMousewheel() {
        container.unbind(mwEvent).bind(mwEvent, function(dataAndEvents, deepDataAndEvents, deltaX, deltaY) {
          var dX = horizontalDragPosition;
          var dY = verticalDragPosition;
          jsp.scrollBy(deltaX * settings.mouseWheelSpeed, -deltaY * settings.mouseWheelSpeed, false);
          return dX == horizontalDragPosition && dY == verticalDragPosition;
        });
      }
      /**
       * @return {undefined}
       */
      function removeMousewheel() {
        container.unbind(mwEvent);
      }
      /**
       * @return {?}
       */
      function nil() {
        return false;
      }
      /**
       * @return {undefined}
       */
      function initFocusHandler() {
        pane.find(":input,a").unbind("focus.jsp").bind("focus.jsp", function(e) {
          scrollToElement(e.target, false);
        });
      }
      /**
       * @return {undefined}
       */
      function removeFocusHandler() {
        pane.find(":input,a").unbind("focus.jsp");
      }
      /**
       * @return {undefined}
       */
      function initKeyboardNav() {
        /**
         * @return {?}
         */
        function keyDownHandler() {
          var dX = horizontalDragPosition;
          var dY = verticalDragPosition;
          switch(keyDown) {
            case 40:
              jsp.scrollByY(settings.keyboardSpeed, false);
              break;
            case 38:
              jsp.scrollByY(-settings.keyboardSpeed, false);
              break;
            case 34:
            ;
            case 32:
              jsp.scrollByY(paneHeight * settings.scrollPagePercent, false);
              break;
            case 33:
              jsp.scrollByY(-paneHeight * settings.scrollPagePercent, false);
              break;
            case 39:
              jsp.scrollByX(settings.keyboardSpeed, false);
              break;
            case 37:
              jsp.scrollByX(-settings.keyboardSpeed, false);
              break;
          }
          /** @type {boolean} */
          elementHasScrolled = dX != horizontalDragPosition || dY != verticalDragPosition;
          return elementHasScrolled;
        }
        var keyDown;
        var elementHasScrolled;
        /** @type {Array} */
        var validParents = [];
        if (isScrollableH) {
          validParents.push(horizontalBar[0]);
        }
        if (isScrollableV) {
          validParents.push(verticalBar[0]);
        }
        pane.focus(function() {
          elem.focus();
        });
        elem.attr("tabindex", 0).unbind("keydown.jsp keypress.jsp").bind("keydown.jsp", function(e) {
          if (e.target !== this && !(validParents.length && $(e.target).closest(validParents).length)) {
            return;
          }
          var dX = horizontalDragPosition;
          var dY = verticalDragPosition;
          switch(e.keyCode) {
            case 40:
            ;
            case 38:
            ;
            case 34:
            ;
            case 32:
            ;
            case 33:
            ;
            case 39:
            ;
            case 37:
              keyDown = e.keyCode;
              keyDownHandler();
              break;
            case 35:
              scrollToY(contentHeight - paneHeight);
              /** @type {null} */
              keyDown = null;
              break;
            case 36:
              scrollToY(0);
              /** @type {null} */
              keyDown = null;
              break;
          }
          /** @type {boolean} */
          elementHasScrolled = e.keyCode == keyDown && dX != horizontalDragPosition || dY != verticalDragPosition;
          return!elementHasScrolled;
        }).bind("keypress.jsp", function(e) {
          if (e.keyCode == keyDown) {
            keyDownHandler();
          }
          return!elementHasScrolled;
        });
        if (settings.hideFocus) {
          elem.css("outline", "none");
          if ("hideFocus" in container[0]) {
            elem.attr("hideFocus", true);
          }
        } else {
          elem.css("outline", "");
          if ("hideFocus" in container[0]) {
            elem.attr("hideFocus", false);
          }
        }
      }
      /**
       * @return {undefined}
       */
      function removeKeyboardNav() {
        elem.attr("tabindex", "-1").removeAttr("tabindex").unbind("keydown.jsp keypress.jsp");
      }
      /**
       * @return {undefined}
       */
      function observeHash() {
        if (location.hash && location.hash.length > 1) {
          var $col;
          var scrollIntervalId;
          /** @type {string} */
          var e = escape(location.hash);
          try {
            $col = $(e);
          } catch (s) {
            return;
          }
          if ($col.length && pane.find(e)) {
            if (container.scrollTop() === 0) {
              /** @type {number} */
              scrollIntervalId = setInterval(function() {
                if (container.scrollTop() > 0) {
                  scrollToElement(e, true);
                  $(document).scrollTop(container.position().top);
                  clearInterval(scrollIntervalId);
                }
              }, 50);
            } else {
              scrollToElement(e, true);
              $(document).scrollTop(container.position().top);
            }
          }
        }
      }
      /**
       * @return {undefined}
       */
      function unhijackInternalLinks() {
        $("a.jspHijack").unbind("click.jsp-hijack").removeClass("jspHijack");
      }
      /**
       * @return {undefined}
       */
      function hijackInternalLinks() {
        unhijackInternalLinks();
        $("a[href^=#]").addClass("jspHijack").bind("click.jsp-hijack", function() {
          var uriParts = this.href.split("#");
          var hash;
          if (uriParts.length > 1) {
            hash = uriParts[1];
            if (hash.length > 0 && pane.find("#" + hash).length > 0) {
              scrollToElement("#" + hash, true);
              return false;
            }
          }
        });
      }
      /**
       * @return {undefined}
       */
      function initTouch() {
        var startX;
        var startY;
        var touchStartX;
        var touchStartY;
        var thisp;
        /** @type {boolean} */
        var s = false;
        container.unbind("touchstart.jsp touchmove.jsp touchend.jsp click.jsp-touchclick").bind("touchstart.jsp", function(event) {
          var e = event.originalEvent.touches[0];
          startX = contentPositionX();
          startY = contentPositionY();
          touchStartX = e.pageX;
          touchStartY = e.pageY;
          /** @type {boolean} */
          thisp = false;
          /** @type {boolean} */
          s = true;
        }).bind("touchmove.jsp", function(e) {
          if (!s) {
            return;
          }
          var touchPos = e.originalEvent.touches[0];
          var dX = horizontalDragPosition;
          var dY = verticalDragPosition;
          jsp.scrollTo(startX + touchStartX - touchPos.pageX, startY + touchStartY - touchPos.pageY);
          thisp = thisp || (Math.abs(touchStartX - touchPos.pageX) > 5 || Math.abs(touchStartY - touchPos.pageY) > 5);
          return dX == horizontalDragPosition && dY == verticalDragPosition;
        }).bind("touchend.jsp", function(dataAndEvents) {
          /** @type {boolean} */
          s = false;
        }).bind("click.jsp-touchclick", function(dataAndEvents) {
          if (thisp) {
            /** @type {boolean} */
            thisp = false;
            return false;
          }
        });
      }
      /**
       * @return {undefined}
       */
      function destroy() {
        var currentY = contentPositionY();
        var currentX = contentPositionX();
        elem.removeClass("jspScrollable").unbind(".jsp");
        elem.replaceWith(originalElement.append(pane.children()));
        originalElement.scrollTop(currentY);
        originalElement.scrollLeft(currentX);
      }
      var settings;
      var jsp = this;
      var pane;
      var paneWidth;
      var paneHeight;
      var container;
      var contentWidth;
      var contentHeight;
      var percentInViewH;
      var percentInViewV;
      var isScrollableV;
      var isScrollableH;
      var verticalDrag;
      var dragMaxY;
      var verticalDragPosition;
      var horizontalDrag;
      var dragMaxX;
      var horizontalDragPosition;
      var verticalBar;
      var verticalTrack;
      var scrollbarWidth;
      var verticalTrackHeight;
      var verticalDragHeight;
      var arrowUp;
      var arrowDown;
      var horizontalBar;
      var horizontalTrack;
      var horizontalTrackWidth;
      var horizontalDragWidth;
      var arrowLeft;
      var arrowRight;
      var reinitialiseInterval;
      var originalPadding;
      var originalPaddingTotalWidth;
      var previousContentWidth;
      /** @type {boolean} */
      var wasAtTop = true;
      /** @type {boolean} */
      var wasAtLeft = true;
      /** @type {boolean} */
      var wasAtBottom = false;
      /** @type {boolean} */
      var wasAtRight = false;
      var originalElement = elem.clone(false, false).empty();
      /** @type {string} */
      var mwEvent = $.fn.mwheelIntent ? "mwheelIntent.jsp" : "mousewheel.jsp";
      originalPadding = elem.css("paddingTop") + " " + elem.css("paddingRight") + " " + elem.css("paddingBottom") + " " + elem.css("paddingLeft");
      /** @type {number} */
      originalPaddingTotalWidth = (parseInt(elem.css("paddingLeft"), 10) || 0) + (parseInt(elem.css("paddingRight"), 10) || 0);
      $.extend(jsp, {
        /**
         * @param {(RegExp|string)} s
         * @return {undefined}
         */
        reinitialise : function(s) {
          s = $.extend({}, settings, s);
          initialise(s);
        },
        /**
         * @param {?} ele
         * @param {boolean} recurring
         * @param {boolean} animate
         * @return {undefined}
         */
        scrollToElement : function(ele, recurring, animate) {
          scrollToElement(ele, recurring, animate);
        },
        /**
         * @param {number} destX
         * @param {number} destY
         * @param {boolean} animate
         * @return {undefined}
         */
        scrollTo : function(destX, destY, animate) {
          scrollToX(destX, animate);
          scrollToY(destY, animate);
        },
        /**
         * @param {number} destX
         * @param {boolean} animate
         * @return {undefined}
         */
        scrollToX : function(destX, animate) {
          scrollToX(destX, animate);
        },
        /**
         * @param {number} destY
         * @param {boolean} recurring
         * @return {undefined}
         */
        scrollToY : function(destY, recurring) {
          scrollToY(destY, recurring);
        },
        /**
         * @param {number} destPercentX
         * @param {boolean} animate
         * @return {undefined}
         */
        scrollToPercentX : function(destPercentX, animate) {
          scrollToX(destPercentX * (contentWidth - paneWidth), animate);
        },
        /**
         * @param {number} destPercentY
         * @param {boolean} recurring
         * @return {undefined}
         */
        scrollToPercentY : function(destPercentY, recurring) {
          scrollToY(destPercentY * (contentHeight - paneHeight), recurring);
        },
        /**
         * @param {number} deltaX
         * @param {number} deltaY
         * @param {boolean} animate
         * @return {undefined}
         */
        scrollBy : function(deltaX, deltaY, animate) {
          jsp.scrollByX(deltaX, animate);
          jsp.scrollByY(deltaY, animate);
        },
        /**
         * @param {number} deltaX
         * @param {boolean} animate
         * @return {undefined}
         */
        scrollByX : function(deltaX, animate) {
          var destX = contentPositionX() + Math[deltaX < 0 ? "floor" : "ceil"](deltaX);
          /** @type {number} */
          var percentScrolled = destX / (contentWidth - paneWidth);
          positionDragX(percentScrolled * dragMaxX, animate);
        },
        /**
         * @param {number} deltaY
         * @param {boolean} recurring
         * @return {undefined}
         */
        scrollByY : function(deltaY, recurring) {
          var destY = contentPositionY() + Math[deltaY < 0 ? "floor" : "ceil"](deltaY);
          /** @type {number} */
          var percentScrolled = destY / (contentHeight - paneHeight);
          positionDragY(percentScrolled * dragMaxY, recurring);
        },
        /**
         * @param {number} x
         * @param {boolean} animate
         * @return {undefined}
         */
        positionDragX : function(x, animate) {
          positionDragX(x, animate);
        },
        /**
         * @param {number} y
         * @param {boolean} recurring
         * @return {undefined}
         */
        positionDragY : function(y, recurring) {
          positionDragY(y, recurring);
        },
        /**
         * @param {?} ele
         * @param {string} prop
         * @param {number} value
         * @param {Function} stepCallback
         * @return {undefined}
         */
        animate : function(ele, prop, value, stepCallback) {
          var params = {};
          /** @type {number} */
          params[prop] = value;
          ele.animate(params, {
            duration : settings.animateDuration,
            easing : settings.animateEase,
            queue : false,
            /** @type {Function} */
            step : stepCallback
          });
        },
        /**
         * @return {?}
         */
        getContentPositionX : function() {
          return contentPositionX();
        },
        /**
         * @return {?}
         */
        getContentPositionY : function() {
          return contentPositionY();
        },
        /**
         * @return {?}
         */
        getContentWidth : function() {
          return contentWidth;
        },
        /**
         * @return {?}
         */
        getContentHeight : function() {
          return contentHeight;
        },
        /**
         * @return {?}
         */
        getPercentScrolledX : function() {
          return contentPositionX() / (contentWidth - paneWidth);
        },
        /**
         * @return {?}
         */
        getPercentScrolledY : function() {
          return contentPositionY() / (contentHeight - paneHeight);
        },
        /**
         * @return {?}
         */
        getIsScrollableH : function() {
          return isScrollableH;
        },
        /**
         * @return {?}
         */
        getIsScrollableV : function() {
          return isScrollableV;
        },
        /**
         * @return {?}
         */
        getContentPane : function() {
          return pane;
        },
        /**
         * @param {boolean} recurring
         * @return {undefined}
         */
        scrollToBottom : function(recurring) {
          positionDragY(dragMaxY, recurring);
        },
        /**
         * @return {undefined}
         */
        hijackInternalLinks : function() {
          hijackInternalLinks();
        },
        /**
         * @return {undefined}
         */
        destroy : function() {
          destroy();
        }
      });
      initialise(s);
    }
    settings = $.extend({}, $.fn.jScrollPane.defaults, settings);
    $.each(["mouseWheelSpeed", "arrowButtonSpeed", "trackClickSpeed", "keyboardSpeed"], function() {
      settings[this] = settings[this] || settings.speed;
    });
    return this.each(function() {
      var elem = $(this);
      var jspApi = elem.data("jsp");
      if (jspApi) {
        jspApi.reinitialise(settings);
      } else {
        jspApi = new JScrollPane(elem, settings);
        elem.data("jsp", jspApi);
      }
    });
  };
  $.fn.jScrollPane.defaults = {
    showArrows : false,
    maintainPosition : true,
    stickToBottom : false,
    stickToRight : false,
    clickOnTrack : true,
    autoReinitialise : false,
    autoReinitialiseDelay : 500,
    verticalDragMinHeight : 0,
    verticalDragMaxHeight : 99999,
    horizontalDragMinWidth : 0,
    horizontalDragMaxWidth : 99999,
    contentWidth : permanent,
    animateScroll : false,
    animateDuration : 300,
    animateEase : "linear",
    hijackInternalLinks : false,
    verticalGutter : 4,
    horizontalGutter : 4,
    mouseWheelSpeed : 0,
    arrowButtonSpeed : 0,
    arrowRepeatFreq : 50,
    arrowScrollOnHover : false,
    trackClickSpeed : 0,
    trackClickRepeatFreq : 70,
    verticalArrowPositions : "split",
    horizontalArrowPositions : "split",
    enableKeyboardNavigation : true,
    hideFocus : false,
    keyboardSpeed : 0,
    initialDelay : 300,
    speed : 30,
    scrollPagePercent : 0.8
  };
})(jQuery, this);
